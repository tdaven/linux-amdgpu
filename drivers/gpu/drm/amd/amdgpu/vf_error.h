/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef __VF_ERROR_H__
#define __VF_ERROR_H__

#define AMDGIM_ERROR_CODE_FLAGS_TO_MAILBOX(c,f)    (((c & 0xFFFF) << 16) | (f & 0xFFFF))
#define AMDGIM_ERROR_CODE(t,c)       (((t&0xF)<<12)|(c&0xFFF))
#define AMDGIM_ERROR_CATAGORY(c)     ((c>>12) & 0xF)
#define AMDGIM_ERROR_SUBCODE(c)      (c&0xFFF)
#define AMDGIM_GPU_ERROR_MSG_SIZE         256        /* The length of error text should be less than this number. */
#define AMDGIM_GPU_ERROR_BUF_SAFE_SIZE    (AMDGIM_GPU_ERROR_MSG_SIZE + 120) /* The safe length of printing out the full error message to buffer. */


/* Please keep enum same as AMD GIM driver */
enum {
	AMDGIM_ERROR_VF_GPU_INIT_FATAL_FAIL = 0,
	AMDGIM_ERROR_VF_ATOMBIOS_INIT_FAIL,
	AMDGIM_ERROR_VF_UNLOCATE_BIOS_ROM,
	AMDGIM_ERROR_VF_NO_VBIOS,
	AMDGIM_ERROR_VF_GPU_POST_ERROR,

	AMDGIM_ERROR_VF_ATOMBIOS_GET_CLOCK_FAIL,
	AMDGIM_ERROR_VF_FENCE_INIT_FAIL,
	AMDGIM_ERROR_VF_AMDGPU_INIT_FAIL,
	AMDGIM_ERROR_VF_IB_INIT_FAIL,
	AMDGIM_ERROR_VF_AMDGPU_LATE_INIT_FAIL,

	AMDGIM_ERROR_VF_ASIC_RESUME_FAIL,
	AMDGIM_ERROR_VF_GPU_RESET_FAIL,
	AMDGIM_ERROR_VF_MMSCH_INIT_FAIL,
	AMDGIM_ERROR_VF_UVD_NORESP_GIVEUP,
	AMDGIM_ERROR_VF_UVD_NORESP_RESET,

	AMDGIM_ERROR_VF_LOAD_GFX_FIRMWARE_FAIL,
	AMDGIM_ERROR_VF_MEC_BO_INIT_FAIL,
	AMDGIM_ERROR_VF_ADD_DEV_TO_GENPD_FAIL,
	AMDGIM_ERROR_VF_IH_WB_ALLOC_FAIL,
	AMDGIM_ERROR_VF_BO_ALLOC_K_FAIL,

	AMDGIM_ERROR_VF_BO_RESERVE_FAIL,
	AMDGIM_ERROR_VF_BO_PIN_FAIL,
	AMDGIM_ERROR_VF_BO_MAP_FAIL,
	AMDGIM_ERROR_VF_RING_R_WB_ALLOC_FAIL,
	AMDGIM_ERROR_VF_RING_W_WB_ALLOC_FAIL,

	AMDGIM_ERROR_VF_RING_F_WB_ALLOC_FAIL,
	AMDGIM_ERROR_VF_RING_C_WB_ALLOC_FAIL,
	AMDGIM_ERROR_VF_INIT_FENCE_FAIL,
	AMDGIM_ERROR_VF_RING_CREATE_FAIL,
	AMDGIM_ERROR_VF_BO_ALLOC_M_FAIL,

	AMDGIM_ERROR_VF_NO_BO_FOR_SA,
	AMDGIM_ERROR_VF_FW_ALLOC_FAIL,
	AMDGIM_ERROR_VF_FW_RESERVE_FAIL,
	AMDGIM_ERROR_VF_FW_PIN_FAIL,
	AMDGIM_ERROR_VF_FW_KMAP_FAIL,

	AMDGIM_ERROR_VF_UVD_NOT_LOAD_FW,
	AMDGIM_ERROR_VF_UVD_NOT_VALIDATE_FW,
	AMDGIM_ERROR_VF_ALLOC_UVD_BO_FAIL,
	AMDGIM_ERROR_VF_VCE_NOT_LOAD_FW,
	AMDGIM_ERROR_VF_VCE_NOT_VALIDATE_FW,

	AMDGIM_ERROR_VF_ALLOC_VCE_BO_FAIL,
	AMDGIM_ERROR_VF_VCE_RESERVE_FAIL,
	AMDGIM_ERROR_VF_VCE_KMAP_FAIL,
	AMDGIM_ERROR_VF_NO_VRAM_FOR_GART,
	AMDGIM_ERROR_VF_PSP_LOAD_FW_FAIL,

	AMDGIM_ERROR_VF_INIT_MMSCH_FAIL,
	AMDGIM_ERROR_VF_GFX_LOAD_FW_FAIL,
	AMDGIM_ERROR_VF_NGG_CREATE_BUF_FAIL,
	AMDGIM_ERROR_VF_NGG_CREATE_PR_BUF_FAIL,
	AMDGIM_ERROR_VF_NGG_CREATE_PO_BUF_FAIL,

	AMDGIM_ERROR_VF_NGG_CREATE_CS_BUF_FAIL,
	AMDGIM_ERROR_VF_NGG_CREATE_PC_BUF_FAIL,
	AMDGIM_ERROR_VF_BUFL_SIZE_INVALID,
	AMDGIM_ERROR_VF_RLC_BO_INIT_FAIL,

	AMDGIM_ERROR_VF_TEST,
	AMDGIM_ERROR_VF_MAX
};

enum {
    AMDGIM_ERROR_CATEGORY_NON_USED = 0,
    AMDGIM_ERROR_CATEGORY_GIM,
    AMDGIM_ERROR_CATEGORY_PF,
    AMDGIM_ERROR_CATEGORY_VF,
    AMDGIM_ERROR_CATEGORY_VBIOS,
    AMDGIM_ERROR_CATEGORY_MONITOR,

    AMDGIM_ERROR_CATEGORY_MAX
};

void amdgpu_put_vf_error(uint16_t sub_error_code, uint16_t error_flags, uint64_t error_data);
void amdgpu_trans_all_vf_error (struct amdgpu_device *adev);

#endif /* __VF_ERROR_H__ */
